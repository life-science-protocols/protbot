[{"path":"https://life-science-protocols.github.io/protbot/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Leonardo Mendes-Silva Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://life-science-protocols.github.io/protbot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Leonardo Mendes-Silva. Author, maintainer. Ramiro Magno. Author. Pattern Institute. Copyright holder, funder.","code":""},{"path":"https://life-science-protocols.github.io/protbot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mendes-Silva L, Magno R (2023). protbot: Package (One Line, Title Case). R package version 0.0.1, https://github.com/life-science-protocols/protbot/, https://life-science-protocols.github.io/protbot/.","code":"@Manual{,   title = {protbot: What the Package Does (One Line, Title Case)},   author = {Leonardo Mendes-Silva and Ramiro Magno},   year = {2023},   note = {R package version 0.0.1, https://github.com/life-science-protocols/protbot/},   url = {https://life-science-protocols.github.io/protbot/}, }"},{"path":"https://life-science-protocols.github.io/protbot/index.html","id":"protbot","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"goal protbot automate process protein quantification.","code":""},{"path":"https://life-science-protocols.github.io/protbot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version protbot GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"life-science-protocols/protbot\")"},{"path":"https://life-science-protocols.github.io/protbot/reference/find_vol_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the volume of a stock solution to aliquot — find_vol_i","title":"Find the volume of a stock solution to aliquot — find_vol_i","text":"Suppose need prepare new working solution stock solution whose concentration conc_i. final concentration volume conc_f vol_f, find_vol_i() determines volume stock solution use (vol_i), .e. aliquot volume. find_vol_i() uses well-known Dilution Equation: $$c_i v_i = c_f v_f$$ Thus, initial stock volume aliquot : $$v_i = \\frac{c_f v_f}{c_i}$$","code":""},{"path":"https://life-science-protocols.github.io/protbot/reference/find_vol_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the volume of a stock solution to aliquot — find_vol_i","text":"","code":"find_vol_i(conc_i, conc_f, vol_f)"},{"path":"https://life-science-protocols.github.io/protbot/reference/find_vol_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the volume of a stock solution to aliquot — find_vol_i","text":"conc_i Initial stock solution concentration. conc_f New (final) solution concentration. vol_f New (final) solution volume.","code":""},{"path":"https://life-science-protocols.github.io/protbot/reference/find_vol_i.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the volume of a stock solution to aliquot — find_vol_i","text":"numeric vector whose values represent volume stock solution use. units volumes interpreted final volume vol_f.","code":""},{"path":"https://life-science-protocols.github.io/protbot/reference/find_vol_i.html","id":"admonition","dir":"Reference","previous_headings":"","what":"Admonition","title":"Find the volume of a stock solution to aliquot — find_vol_i","text":"function means checking correct usage units concentrations volumes. user needs ensure units coherent, .e. use unit conc_i conc_f, e.g. M uM; expect units vol_f final result.","code":""},{"path":"https://life-science-protocols.github.io/protbot/reference/find_vol_i.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the volume of a stock solution to aliquot — find_vol_i","text":"","code":"# Stock solution concentration of 10 Molar (`conc_i`). # Desired/new solution concentration of 5 Molar (`conc_f`). # Final volume of the new solution: 1 Litre (`vol_f`). find_vol_i(conc_i = 10, conc_f = 5, vol_f = 1) #> [1] 0.5  # `find_vol_i()` is vectorised and applies tidyverse recycling find_vol_i(conc_i = 10, conc_f = c(5, 5/2, 5/4, 5/8), vol_f = 1) #> [1] 0.5000 0.2500 0.1250 0.0625"},{"path":"https://life-science-protocols.github.io/protbot/reference/protbot-package.html","id":null,"dir":"Reference","previous_headings":"","what":"protbot: What the Package Does (One Line, Title Case) — protbot-package","title":"protbot: What the Package Does (One Line, Title Case) — protbot-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://life-science-protocols.github.io/protbot/reference/protbot-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"protbot: What the Package Does (One Line, Title Case) — protbot-package","text":"Maintainer: Leonardo Mendes-Silva lmesilva@pattern.institute (ORCID) Authors: Ramiro Magno rmagno@pattern.institute (ORCID) contributors: Pattern Institute [copyright holder, funder]","code":""},{"path":"https://life-science-protocols.github.io/protbot/reference/read_sample_calibration.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a sample calibration file — read_sample_calibration","title":"Read a sample calibration file — read_sample_calibration","text":"function reads calibration file bundled protbot.","code":""},{"path":"https://life-science-protocols.github.io/protbot/reference/read_sample_calibration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a sample calibration file — read_sample_calibration","text":"","code":"read_sample_calibration(file = stop(\"Please provide a `file` path\"))"},{"path":"https://life-science-protocols.github.io/protbot/reference/read_sample_calibration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a sample calibration file — read_sample_calibration","text":"file string sample calibration file name.","code":""},{"path":"https://life-science-protocols.github.io/protbot/reference/read_sample_calibration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a sample calibration file — read_sample_calibration","text":"data frame resulting reading sample calibration file pointed file.","code":""},{"path":"https://life-science-protocols.github.io/protbot/scenario01.html","id":null,"dir":"","previous_headings":"","what":"Protein quantification (scenario01)","title":"Protein quantification (scenario01)","text":"markdown file quantifying protein unknown samples EXPERIMENT_LABEL using METHOD_NAME. already know calibration curve (y = mx + b) parameters: absorvance samples measured spectrophotometer (BRAND,MODEL) store file NAME_OF_THE_FILE. want prepare samples Western Blot, thus can quantify protein samples volume need load gel. results quantification volumes needed load samples gel:","code":"#calibration curve slope m = m # calibration curve intercept b = b # correlation coefficient R2 = r2 my_csv = input_table  #`NAME_OF_THE_FILE` prot_quantification <- function(m,b,my_csv) print(output_table)"},{"path":"https://life-science-protocols.github.io/protbot/scenario01.html","id":"researcher-notes","dir":"","previous_headings":"","what":"Researcher notes","title":"Protein quantification (scenario01)","text":"%% Take notes experiment %%","code":""},{"path":"https://life-science-protocols.github.io/protbot/scenario01.html","id":"session-info","dir":"","previous_headings":"","what":"Session info","title":"Protein quantification (scenario01)","text":"","code":"session_info()"},{"path":"https://life-science-protocols.github.io/protbot/scenario02.html","id":null,"dir":"","previous_headings":"","what":"Protein quantification (scenario02)","title":"Protein quantification (scenario02)","text":"markdown file quantifying protein unknown samples EXPERIMENT_LABEL using METHOD_NAME. First need determine calibration curve (y = mx + b). absorvance calibration unknown samples measured spectrophotometer (BRAND,MODEL) store file NAME_OF_THE_FILE. protein used calibration PROTEIN_FOR_CALIBRATION (e.g. BSA (BRAND,CatNo, Batch)) prepared BUFFER. Now, first step calculate calibration curve. need load csv absorvance values known protein calibration. Now can run function calculate parameters curve, correlation coefficient make plot visualize curve. second step quantify protein unknown samples. need parameters (slope m intercept b) calibration curve table unknown samples. %%% now similar scenario01 %%% want prepare samples Western Blot, thus can quantify protein samples volume need load gel. Now make plot calibration plot points unknown samples, check quantification within recommended limits quantification (middle curve). Last step results quantification volumes needed load samples gel:","code":"my_calibration = input_table1 function(my_calibration) print(plot_calibration) # maybe out put quality control check for R2< 0.9 my_csv = input_table  #`NAME_OF_THE_FILE` prot_quantification <- function(m,b,my_csv) print(plot_calibration_with_unknown_samples) print(output_table)"},{"path":"https://life-science-protocols.github.io/protbot/scenario02.html","id":"researcher-notes","dir":"","previous_headings":"","what":"Researcher notes","title":"Protein quantification (scenario02)","text":"%% Take notes experiment %%","code":""},{"path":"https://life-science-protocols.github.io/protbot/scenario02.html","id":"session-info","dir":"","previous_headings":"","what":"Session info","title":"Protein quantification (scenario02)","text":"","code":"session_info()"},{"path":"https://life-science-protocols.github.io/protbot/scenarios_western_blot.html","id":null,"dir":"","previous_headings":"","what":"Scenario-01 : simplest scenario possible","title":"Scenario-01 : simplest scenario possible","text":"inputs : - parameters equation y=mx+b (m slope b intercept) - input_table contains: - absorvance values samples unknown protein concentration - amount protein load gel - max volume allowed pipette - experiment_label create folder organized data plots - send_results_to_here path files export (optional argument) output : - calibration curve (forced) - bar plot protein concentration (y) samples (x) - output_table correspondent volume desired protein amount buffer make max volume function look something like : input table (fake values): example, table ignoring annotation data (biological group, biological_replicate, technical replicate). Example output table (fake values): function (option?) also create directory (name experiment_label) : - 00_R_objects - save R objects (possible) future use - 01_input_data - copy input_sample_table.csv - 02_data_analysis - copy rmd scenario01 package runs - 03_output_data - output_table.csv - 04_output_plots - calibration curve - bar plot quantified protein - 05_output_pdf - export rmd pdf/html Stepwise function : 1. create new directory specified destination () 2. copy input_table.csv 3. copy rmd scenario01 package run 1. runs another function reads absorvance values df$abs performs protein quantification appends input_table create output_table 2. used calculte sample_volume buffer_volume wich appended table previous step 1. function, transversal step many methods 4. make plots 1. calibration curve 2. bar plot 5. export rmd pdf/html 6. export R objects","code":"function_scenario01(experiment_label,m,b,r2,input_sample_table, send_results_to_here)"},{"path":"https://life-science-protocols.github.io/protbot/scenarios_western_blot.html","id":"scenario-02--common-scenario","dir":"","previous_headings":"","what":"Scenario-02 : common scenario","title":"Scenario-01 : simplest scenario possible","text":"inputs : - input_table1 input_calibration_table contains: - standard concentration - absorvance values standard concentration - input_table2 input_sample_table contains: - absorvance values samples unknown protein concentration - amount protein load gel - max volume allowed pipette - experiment_label create folder organized data plots - send_results_to_here path files export (optional argument) example absorvance measurements standard protein solution determine calibration curve: Stepwise function : 1. create new directory specified destination () 2. copy input_calibration_table.csv input_sample_table.csv 3. calibration curve 1. calculate extract parameters linear regression parameter (y = m + b) 4. copy rmd scenario02 package run 1. runs another function reads absorvance values df$abs performs protein quantification appends input_table2 create output_table 2. used calculate sample_volume buffer_volume wich appended table previous step 1. function, transversal step many methods 5. make plots 1. calibration curve 2. bar plot quantified protein 3. make extra plot showing unknown sample points calibration curve 6. export rmd pdf/html 7. export R objects","code":"function_scenario02(experiment_label,input_calibration_table,input_sample_table, send_results_to_here)"}]
